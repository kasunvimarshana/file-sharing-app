version: '3.8'

services:
  p2p-torrent:
    build: 
      context: .
      dockerfile: Dockerfile
    ports:
      - "3000:8080"    # Web interface
      - "3478:3478/udp" # STUN server
      - "3479:3479/udp" # TURN server
    environment:
      - NODE_ENV=production
      - PORT=8080
      - STUN_PORT=3478
      - TURN_PORT=3479
      - MAX_CONNECTIONS=1000
      - RATE_LIMIT_MAX=100
      - LOG_LEVEL=info
      - CORS_ORIGIN=*
    restart: unless-stopped
    volumes:
      - ./logs:/app/logs
      - p2p_data:/app/data
    networks:
      - p2p-network
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:8080/api/health"]
      interval: 30s
      timeout: 10s
      retries: 3
      start_period: 40s
    labels:
      - "traefik.enable=true"
      - "traefik.http.routers.p2p-torrent.rule=Host(`p2p.localhost`)"
      - "traefik.http.services.p2p-torrent.loadbalancer.server.port=8080"
    deploy:
      resources:
        limits:
          cpus: '2.0'
          memory: 1G
        reservations:
          cpus: '0.5'
          memory: 256M
    security_opt:
      - no-new-privileges:true
    read_only: true
    tmpfs:
      - /tmp
      # - /app/logs

  # Optional: Reverse proxy for production deployment
  traefik:
    image: traefik:v2.10
    command:
      - "--api.insecure=true"
      - "--providers.docker=true"
      - "--providers.docker.exposedbydefault=false"
      - "--entrypoints.web.address=:80"
      - "--entrypoints.websecure.address=:443"
      - "--certificatesresolvers.letsencrypt.acme.httpchallenge=true"
      - "--certificatesresolvers.letsencrypt.acme.httpchallenge.entrypoint=web"
      - "--certificatesresolvers.letsencrypt.acme.email=admin@example.com"
      - "--certificatesresolvers.letsencrypt.acme.storage=/letsencrypt/acme.json"
    ports:
      - "80:80"
      - "443:443"
      - "8080:8080"
    volumes:
      - /var/run/docker.sock:/var/run/docker.sock:ro
      - letsencrypt:/letsencrypt
    networks:
      - p2p-network
    restart: unless-stopped
    profiles:
      - production

  # Optional: Monitoring with Prometheus
  prometheus:
    image: prom/prometheus:latest
    ports:
      - "9090:9090"
    volumes:
      - ./monitoring/prometheus.yml:/etc/prometheus/prometheus.yml
      - prometheus_data:/prometheus
    command:
      - '--config.file=/etc/prometheus/prometheus.yml'
      - '--storage.tsdb.path=/prometheus'
      - '--web.console.libraries=/etc/prometheus/console_libraries'
      - '--web.console.templates=/etc/prometheus/consoles'
      - '--storage.tsdb.retention.time=200h'
      - '--web.enable-lifecycle'
    networks:
      - p2p-network
    restart: unless-stopped
    profiles:
      - monitoring

  # Optional: Grafana for visualization
  grafana:
    image: grafana/grafana:latest
    ports:
      - "3001:3000"
    environment:
      - GF_SECURITY_ADMIN_PASSWORD=admin
    volumes:
      - grafana_data:/var/lib/grafana
    networks:
      - p2p-network
    restart: unless-stopped
    profiles:
      - monitoring

volumes:
  p2p_data:
  letsencrypt:
  prometheus_data:
  grafana_data:

networks:
  p2p-network:
    driver: bridge
    ipam:
      config:
        - subnet: 172.20.0.0/16