version: '3.8'

services:
  # Signaling Server
  signaling-server:
    build: .
    container_name: p2p-signaling
    ports:
      - "8080:8080"
    environment:
      - NODE_ENV=production
      - PORT=8080
    command: ["node", "backend/signaling-server.js"]
    restart: unless-stopped
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:8080/health"]
      interval: 30s
      timeout: 10s
      retries: 3
      start_period: 40s
    networks:
      - p2p-network

  # STUN Server
  stun-server:
    build: .
    container_name: p2p-stun
    ports:
      - "3478:3478/udp"
    environment:
      - NODE_ENV=production
      - STUN_PORT=3478
    command: ["node", "backend/stun-server.js"]
    restart: unless-stopped
    networks:
      - p2p-network

  # TURN Server
  turn-server:
    build: .
    container_name: p2p-turn
    ports:
      - "3479:3479/udp"
      - "49152-49252:49152-49252/udp"  # Dynamic port range for relay
    environment:
      - NODE_ENV=production
      - TURN_PORT=3479
    command: ["node", "backend/turn-server.js"]
    restart: unless-stopped
    networks:
      - p2p-network

  # Torrent Tracker
  torrent-tracker:
    build: .
    container_name: p2p-tracker
    ports:
      - "8000:8000"
    environment:
      - NODE_ENV=production
      - TRACKER_PORT=8000
    command: ["node", "backend/torrent-tracker.js"]
    restart: unless-stopped
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:8000/health"]
      interval: 30s
      timeout: 10s
      retries: 3
      start_period: 40s
    networks:
      - p2p-network

  # Web Frontend
  web-frontend:
    build:
      context: .
      dockerfile: Dockerfile.frontend
    container_name: p2p-frontend
    ports:
      - "80:80"
      - "443:443"
    volumes:
      - ./nginx.conf:/etc/nginx/nginx.conf:ro
    depends_on:
      - signaling-server
      - torrent-tracker
    restart: unless-stopped
    networks:
      - p2p-network

  # Redis for session management and caching
  redis:
    image: redis:7-alpine
    container_name: p2p-redis
    ports:
      - "6379:6379"
    volumes:
      - redis-data:/data
    command: redis-server --appendonly yes --requirepass p2p-redis-password
    restart: unless-stopped
    networks:
      - p2p-network

networks:
  p2p-network:
    driver: bridge
    # ipam:
    #   config:
    #     - subnet: 172.20.0.0/16

volumes:
  redis-data:
    driver: local